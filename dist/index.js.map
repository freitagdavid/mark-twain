{"mappings":";;;;;;;;;;;;;;;;;;;;;;;AEEA,IAAI,gCAAU;AAEd,MAAM,uCAAiB,CAAC;IACpB,MAAM,kBAAkB,kCAAY;IACpC,gCAAU;IACV,OAAO;AACX;AAEA,MAAM,oCAAc,CAAC;IACjB,IAAI,SAAS,MAAM,OAAO;IAE1B,IAAI,MAAM,OAAO,CAAC,OACd,OAAO,KAAK,GAAG,CAAC;IAGpB,MAAM,sBACF,KAAK,IAAI,KAAK,UACR,kCAAY,KAAK,QAAQ,CAAC,KAAK,CAAC,MAChC,kCAAY,KAAK,QAAQ;IAEnC,MAAM,UAAU;QACZ,MAAM,IAAM;gBAAC;aAAU,CAAC,MAAM,CAAC;QAC/B,SAAS,CAAC,OAAS;gBAAC,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC;aAAC,CAAC,MAAM,CAAC;QAC7C,MAAM,CAAC,OAAS,KAAK,KAAK;QAC1B,MAAM,CAAC,OACH;gBAAC,KAAK,OAAO,GAAG,OAAO;aAAK,CAAC,MAAM,CAAC;QACxC,UAAU,IAAM;gBAAC;aAAK,CAAC,MAAM,CAAC;QAC9B,WAAW,IAAM;gBAAC;aAAI,CAAC,MAAM,CAAC;QAC9B,MAAM,CAAC,OACH;gBACI;gBACA;oBACI,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,GAAG;gBAClB;aACH,CAAC,MAAM,CAAC;QACb,OAAO,CAAC,OAAS;gBACb;gBACA;oBACI,OAAO,KAAK,KAAK;oBACjB,KAAK,KAAK,GAAG;oBACb,KAAK,KAAK,GAAG;gBACjB;aACH;QACD,OAAO,CAAC,OAAS;gBACb;gBACA;oBAAC;oBAAS,qCAAe,KAAK,QAAQ,CAAC,EAAE;iBAAE;gBAC3C;oBAAC;iBAAQ,CAAC,MAAM,CAAC;aACpB;QACD,UAAU,IAAM;gBAAC;aAAK,CAAC,MAAM,CAAC;QAC9B,WAAW,IAAM;gBAAC,gCAAU,OAAO;aAAK,CAAC,MAAM,CAAC;QAChD,UAAU,IAAM;gBAAC;aAAK,CAAC,MAAM,CAAC;QAC9B,QAAQ,IAAM;gBAAC;aAAS,CAAC,MAAM,CAAC;QAChC,YAAY,CAAC,OAAS;gBAAC;gBAAQ,KAAK,KAAK;aAAC;QAC1C,MAAM,CAAC,OAAS;gBAAC;gBAAO;oBAAE,MAAM,KAAK,IAAI;gBAAC;gBAAG;oBAAC;oBAAQ,KAAK,KAAK;iBAAC;aAAC;QAClE,YAAY,IAAM;gBAAC;aAAa,CAAC,MAAM,CAAC;QACxC,OAAO,IAAM;gBAAC;aAAK;QACnB,eAAe,IAAM;gBAAC;aAAK;QAC3B,MAAM,CAAC,OAAS,CAAA,GAAA,yCAAK,EAAE,YAAY,CAAC,KAAK,KAAK;QAC9C,eAAe,IAAM;gBAAC;aAAO,CAAC,MAAM,CAAC;IACzC;IAEA,IAAI,OAAO,CAAC,KAAK,IAAI,CAAC,EAClB,OAAO,OAAO,CAAC,KAAK,IAAI,CAAC,CAAC;SAE1B,OAAO;AAEf;IAEA,2CAAe;;;AD5Df,MAAM,2BAAK,CAAC;IACR,MAAM,MAAc;QAChB,MAAM,CAAC;QACP,SAAS,CAAC;IACd;IAEA,MAAM,MAAM,CAAA,GAAA,gDAAE,EAAE,SAAS,CAAC;IAC1B,MAAM,MAAY,CAAA,GAAA,oBAAK,EAAE,KAAK,CAAC,IAAI,SAAS;IAC5C,IAAI,OAAO,GAAG,CAAA,GAAA,wCAAU,EAAE;IAE1B,OAAO,IAAI,SAAS;IACpB,IAAI,IAAI,GAAG;AACf;IAEA,2CAAe","sources":["src/index.ts","src/MT.ts","src/transformer.ts"],"sourcesContent":["export { default } from \"./MT.ts\";\r\n","import { remark } from \"remark\";\r\nimport YFM from \"yaml-front-matter\";\r\nimport transformer from \"./transformer\";\r\n\r\ninterface Return {\r\n    meta: { [key: string]: string };\r\n    content: object;\r\n}\r\n\r\nexport type Node = ReturnType<typeof remark.parse>;\r\n\r\nconst MT = (markdown: string) => {\r\n    const ret: Return = {\r\n        meta: {},\r\n        content: {},\r\n    };\r\n\r\n    const raw = YFM.loadFront(markdown);\r\n    const ast: Node = remark.parse(raw.__content);\r\n    ret.content = transformer(ast);\r\n\r\n    delete raw.__content;\r\n    ret.meta = raw;\r\n};\r\n\r\nexport default MT;\r\n","import JsonML from \"jsonml.js\";\r\n\r\nlet isTHead = false;\r\n\r\nconst transformTHead = (node) => {\r\n    const transformedNode = transformer(node);\r\n    isTHead = false;\r\n    return transformedNode;\r\n};\r\n\r\nconst transformer = (node) => {\r\n    if (node === null) return null;\r\n\r\n    if (Array.isArray(node)) {\r\n        return node.map(transformer);\r\n    }\r\n\r\n    const transformedChildren =\r\n        node.type === \"table\"\r\n            ? transformer(node.children.slice(1))\r\n            : transformer(node.children);\r\n\r\n    const callMap = {\r\n        root: () => [\"article\"].concat(transformedChildren),\r\n        heading: (node) => [`h${node.depth}`].concat(transformedChildren),\r\n        text: (node) => node.value,\r\n        list: (node) =>\r\n            [node.ordered ? \"ol\" : \"ul\"].concat(transformedChildren),\r\n        listItem: () => [\"li\"].concat(transformedChildren),\r\n        paragraph: () => [\"p\"].concat(transformedChildren),\r\n        link: (node) =>\r\n            [\r\n                \"a\",\r\n                {\r\n                    title: node.title,\r\n                    href: node.url,\r\n                },\r\n            ].concat(transformedChildren),\r\n        image: (node) => [\r\n            \"img\",\r\n            {\r\n                title: node.title,\r\n                src: node.url,\r\n                alt: node.alt,\r\n            },\r\n        ],\r\n        table: (node) => [\r\n            \"table\",\r\n            [\"thead\", transformTHead(node.children[0])],\r\n            [\"tbody\"].concat(transformedChildren),\r\n        ],\r\n        tableRow: () => [\"tr\"].concat(transformedChildren),\r\n        tableCell: () => [isTHead ? \"th\" : \"td\"].concat(transformedChildren),\r\n        emphasis: () => [\"em\"].concat(transformedChildren),\r\n        strong: () => [\"strong\"].concat(transformedChildren),\r\n        inlineCode: (node) => [\"code\", node.value],\r\n        code: (node) => [\"pre\", { lang: node.lang }, [\"code\", node.value]],\r\n        blockquote: () => [\"blockquote\"].concat(transformedChildren),\r\n        break: () => [\"br\"],\r\n        thematicBreak: () => [\"hr\"],\r\n        html: (node) => JsonML.fromHTMLText(node.value),\r\n        linkReference: () => [\"span\"].concat(transformedChildren),\r\n    };\r\n\r\n    if (callMap[node.type]) {\r\n        return callMap[node.type](node);\r\n    } else {\r\n        return node;\r\n    }\r\n};\r\n\r\nexport default transformer;\r\n"],"names":[],"version":3,"file":"index.js.map"}